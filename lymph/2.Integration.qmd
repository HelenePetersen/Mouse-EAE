---
title: "2. Integration"
format: html
editor: visual
---

# Integrating 10xRNA_M-EAE-gdT

### Set up

```{r}
#|output: false

library(Seurat)
library(tidyverse)
library(stringr)
library(patchwork)
library(ggplot2)
library(SingleCellExperiment)
library(scDblFinder)
library(DESeq2)
library(scater)
library(table1)
library(clustree)
library(openxlsx)
```

```{r}
# Johanne
#data_path <- "/Volumes/10xRNA_M-EAE-gdT/data"

#results_path <- "/Volumes/10xRNA_M-EAE-gdT/results/integration"

# Helene
data_path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_M-EAE-gdT/Lymph/data"

results_path <- "o:/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/SpecialProject/10xRNA_M-EAE-gdT/Lymph/results/integration"
```

### Defining project variables

```{r}
project <- "10xRNA_M-EAE-gdT"
experiment_id <- list("LN0", "LN11", "LN21", "NEO")
experiment_num <- length(experiment_id)
```

### Data Load

The preprocessed data containing all experiments are loaded.

```{r}
seu_obj_preproc <- readRDS(paste(data_path, "/seurat_data/seu_obj_preprocessed.rds", sep = ""))
```

## Clustering

The data are clustered by running functions FindNeigbors and FindClusters, then visualized using a UMAP plot at different resolutions.

```{r}
seu_obj_preproc <- FindNeighbors(seu_obj_preproc, dims = 1:30)

seu_obj_preproc <- FindClusters(seu_obj_preproc, resolution = c(0.1, 0.3, 0.5))

ElbowPlot(seu_obj_preproc)

seu_obj_preproc <- RunUMAP(seu_obj_preproc, dims = 1:30)

```

```{r}
DimPlot(seu_obj_preproc, group.by = "RNA_snn_res.0.1", label = TRUE, reduction = "umap")

DimPlot(seu_obj_preproc, group.by = "RNA_snn_res.0.3", label = TRUE, reduction = "umap")

DimPlot(seu_obj_preproc, group.by = "RNA_snn_res.0.5", label = TRUE, reduction = "umap")
```

The clustering is first visualized by coloring the clustering by experiment, to see if the clustering are performed on a technical variation (batch effects) rather than on biological variation.

```{r}
#Visualize Umap grouped by "batch effect"
Non_integrated_experiment_grouped <- DimPlot(seu_obj_preproc, reduction = "umap", group.by = "timepoint")
Non_integrated_experiment_grouped

ggsave("Non_integrated_experiment_grouped.png", Non_integrated_experiment_grouped, path= results_path)


```

The clustering before integration shows no obvious clustering according to the lane (experiment). However some of the variation might still be due to the technical variation in the lanes, instead of the biological variation, which would make the samples cluster according to the cell types, this is the purpose of integration to correct for the batch effect introduced from having samples from different lanes.

## Integrating samples

The data are split according to the experiments, then for each experiment are the data normalized and the highly variable features are found.

The integration works by:

-   Features are chosen by ranking the number of samples they are variable in.

-   The anchors are found by identifying pairs of mutual nearest neighbors, these represent cells in a shared biological state and will guide the integration

-   Then perform the integration by computing correction vectors for each cell.

```{r}
obj.list <- SplitObject(seu_obj_preproc, split.by = "orig.ident")

for(i in 1:length(obj.list)){
  obj.list[[i]] <- NormalizeData(object = obj.list[[i]])
  obj.list[[i]]<- FindVariableFeatures(object = obj.list[[i]])
}

features <- SelectIntegrationFeatures(object.list = obj.list)

anchors <- FindIntegrationAnchors(object.list = obj.list,
                                  anchor.features = features)

seu_obj_integrated <- IntegrateData(anchorset = anchors)


DefaultAssay(seu_obj_integrated) <- "integrated"
saveRDS(seu_obj_integrated, paste(data_path, "/seurat_data/seu_obj_integrated.rds", sep = ""))

```

(Read in the integrated data)

```{r}
seu_obj_integrated <- readRDS(paste(data_path, "/seurat_data/seu_obj_integrated.rds", sep = ""))
```

Scale the integrated data and perform the clustering again on the now integrated data

```{r}
DefaultAssay(seu_obj_integrated) <- "integrated"
all.genes <- rownames(seu_obj_integrated)
seu_obj_integrated <- ScaleData(seu_obj_integrated, features = all.genes)

seu_obj_integrated <- RunPCA(seu_obj_integrated, features = VariableFeatures(object = seu_obj_integrated))

#ElbowPlot(seu_obj_integrated)

seu_obj_integrated <- FindNeighbors(seu_obj_integrated, dims = 1:30)
seu_obj_integrated <- FindClusters(seu_obj_integrated, resolution = c(0.1, 0.2, 0.3, 0.5, 0.7))
```

Visualize the new clustering with a UMAP split by the batch corrected group.

```{r}
seu_obj_integrated <- RunUMAP(seu_obj_integrated, dims = 1:30)

DimPlot(seu_obj_integrated, reduction = "umap")

umap_integrated_experiment <- DimPlot(seu_obj_integrated,
                                      group.by = "timepoint",
                                      label = FALSE)
umap_integrated_experiment
ggsave("umap_integrated_experiment.png", umap_integrated_experiment, path= results_path)

#umap_integrated_disease <- DimPlot(melanoma_seu_obj_integrated,
 #                                  split.by = "HTO_maxID",
  #                                 label = TRUE,
   #                                group.by = "integrated_snn_res.0.2")
#umap_integrated_disease

saveRDS(seu_obj_integrated, paste(data_path, "/seurat_data/seu_obj_integrated_clustered.rds", sep = ""))


```

read in integrated and clustered object
```{r}
seu_obj_integrated <- readRDS(paste(data_path, "/seurat_data/seu_obj_integrated_clustered.rds", sep = ""))
```

### Determine clustering resolution using clustree

```{r}
clustering_tree_res <- clustree(seu_obj_integrated, prefix = "integrated_snn_res.")
clustering_tree_res
ggsave("clustree.png", clustering_tree_res, path= results_path)

umap_res_0.2 <- DimPlot(seu_obj_integrated, group.by = "integrated_snn_res.0.2", label = TRUE, reduction = "umap")
umap_res_0.2
ggsave("umap_res_0.2.png", umap_res_0.2, path= results_path)

umap_res_0.3 <- DimPlot(seu_obj_integrated, group.by = "integrated_snn_res.0.3", label = TRUE, reduction = "umap")
umap_res_0.3
ggsave("umap_res_0.3.png", umap_res_0.3, path= results_path)

umap_res_0.3_split <- DimPlot(seu_obj_integrated, group.by = "integrated_snn_res.0.3", split.by = "timepoint", label = TRUE, reduction = "umap")
umap_res_0.3_split
ggsave("umap_res_0.3_split.png", umap_res_0.3_split, path= results_path)

umap_res_0.5 <- DimPlot(seu_obj_integrated, group.by = "integrated_snn_res.0.5", label = TRUE, reduction = "umap")
umap_res_0.5
ggsave("umap_res_0.5.png", umap_res_0.5, path= results_path)

```

The clustering is not that easy to determine, does it make sense for the upper right corner cluster to be more than one cluster?

```{r}
Idents(seu_obj_integrated) <- "integrated_snn_res.0.3"
```


## Cell annotation

### Feature plots

Explore expression of delta and gamma chains, to guide cell annotation

```{r}
# Extract gene symbols for delta and gamma chains.
delta_chain <- all.genes[(str_detect(all.genes, "Trdv"))]
gamma_chain <- all.genes[(str_detect(all.genes, "Trgv"))]

gamma_chain_2 <- all.genes[(str_detect(all.genes, "Tcrg-V"))]

# Ignore clustering results.
Idents(seu_obj_integrated) <- ""

deltaP <- FeaturePlot(seu_obj_integrated,
                      reduction = "umap",
                      features = delta_chain,
                      min.cutoff = 'q10',
                      label = TRUE) 

gammaP <- FeaturePlot(seu_obj_integrated,
                      reduction = "umap",
                      features = gamma_chain,
                      order = TRUE,
                      min.cutoff = 'q10',
                      label = TRUE) 

gammaP2 <- FeaturePlot(seu_obj_integrated,
                      reduction = "umap",
                      features = gamma_chain_2,
                      order = TRUE,
                      min.cutoff = 'q10',
                      label = TRUE)

IFN_g <- FeaturePlot(seu_obj_integrated,
                      reduction = "umap",
                      features = "Ifng",
                      order = TRUE,
                      min.cutoff = 'q10',
                      label = TRUE)

IL <- FeaturePlot(seu_obj_integrated,
                      reduction = "umap",
                      features = c("Il17a", "Il17f", "Il17re", "Il22", "Il23r", "Il1b"),
                      order = TRUE,
                      min.cutoff = 'q10',
                      label = TRUE)

other_cells <- FeaturePlot(seu_obj_integrated,
                      reduction = "umap",
                      features = c("Cd8a", "Cd4", "Cd38", "Cd19" ),
                      order = TRUE,
                      min.cutoff = 'q10',
                      label = TRUE)
other_cells

Idents(seu_obj_integrated) <- "integrated_snn_res.0.3"
```

Save the files.

```{r}
ggsave(filename = "featureplot_TRD.png",
       path = results_path,
       plot = deltaP)

ggsave(filename = "featureplot_TRG.png",
       path = results_path,
       plot = gammaP)

ggsave(filename = "featureplot_Tcrg-V.png",
       path = results_path,
       plot = gammaP2)

ggsave(filename = "featureplot_IL.png",
       path = results_path,
       plot = IL)

ggsave(filename = "featureplot_INF-G.png",
       path = results_path,
       plot = IFN_g)

ggsave(filename = "featureplot_contamination.png",
       path = results_path,
       plot = other_cells)
```

### Conserved markers in clusters

Explore conserved markers in one cluster compared to all others, to guide cell annotation

```{r}
DefaultAssay(seu_obj_integrated) <- "RNA"
all.genes.RNA <- data.frame(rownames(seu_obj_integrated))
seu_obj_integrated <- JoinLayers(seu_obj_integrated)

cluster10_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 10,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster9_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 9,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster8_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 8,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster7_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 7,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster6_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 6,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster5_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 5,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster4_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 4,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster3_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 3,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster2_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 2,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster1_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 1,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)
## Lck, Cd27
cluster0_markers <- FindMarkers(seu_obj_integrated,
                                                   ident.1 = 0,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)
## Il23r, Il7r, Il17re
```
Save conserved markers as sheets in one excel file
```{r}
clust_markers <- list(cluster0_markers, cluster1_markers, cluster2_markers, cluster3_markers,
  cluster4_markers, cluster5_markers, cluster6_markers, cluster7_markers,
  cluster8_markers, cluster9_markers, cluster10_markers)

wb <- createWorkbook()

for (i in 1:length(clust_markers)) {
  addWorksheet(wb, sheetName = paste("cluster", i-1))
  writeData(wb, sheet = i, x = clust_markers[[i]], rowNames = TRUE)
}

saveWorkbook(wb, paste(results_path,"cluster_markers.xlsx", sep = "/"))

```


## Filter out contamination
```{r}
qcPlotVln <- function(seu_obj, feature, feature_name, threshold1, threshold2, xlab){
  ggplot(data = seu_obj@meta.data,
         mapping = aes(x = orig.ident,
                     y = {{feature}})) +
  geom_violin(colour = "#6699CC",
              fill = "#6699CC",
              alpha = 0.2) +
  geom_jitter(size = 0.1,
              alpha = 0.2) + 
  scale_x_discrete(labels = as.character(xlab)) + 
  xlab("Sample") + 
  ylab(feature_name) + 
  labs(title = paste("Distribution of", tolower(feature_name), "across samples",
                     sep = " ")) +
  #facet_wrap(~reponse) + 
  theme_bw() + 
  geom_hline(yintercept = c(threshold1, threshold2),
             colour = "#CC3333")
}
```


```{r}
DefaultAssay(seu_obj_integrated) <- "RNA"
seu_obj_integrated <- PercentageFeatureSet(seu_obj_integrated,
                                pattern = "Cd4",
                                col.name = "percent_Cd4")

seu_obj_integrated <- PercentageFeatureSet(seu_obj_integrated,
                                pattern = "Cd19",
                                col.name = "percent_Cd19")

seu_obj_integrated <- PercentageFeatureSet(seu_obj_integrated,
                                pattern = "Cd38",
                                col.name = "percent_Cd38")

```

```{r}
vlnplot_cd4 <- qcPlotVln(seu_obj_integrated, 
                          percent_Cd4, 
                          "Cd4 content (%)", 
                          NULL, NULL,
                          experiment_id)

vlnplot_cd19 <- qcPlotVln(seu_obj_integrated, 
                          percent_Cd19, 
                          "Cd19 content (%)", 
                          NULL, NULL,
                          experiment_id)

vlnplot_cd38 <- qcPlotVln(seu_obj_integrated, 
                          percent_Cd38, 
                          "Cd38 content (%)", 
                          NULL, NULL,
                          experiment_id)
```

Save the files.

```{r}
ggsave(filename = "vlnplot_cd4.png",
       path = results_path,
       plot = vlnplot_cd4)

ggsave(filename = "vlnplot_cd19.png",
       path = results_path,
       plot = vlnplot_cd19)

ggsave(filename = "vlnplot_cd38.png",
       path = results_path,
       plot = vlnplot_cd38)
```

```{r}
seu_LN0 <- subset(seu_obj_integrated,
       subset = timepoint == 'LN0')
seu_LN11 <- subset(seu_obj_integrated,
       subset = timepoint == 'LN11')
seu_LN21 <- subset(seu_obj_integrated,
       subset = timepoint == 'LN21')
seu_NEO <- subset(seu_obj_integrated,
       subset = timepoint == 'NEO')

quantile(seu_LN0@meta.data$percent_Cd4, 0.99)
quantile(seu_LN11@meta.data$percent_Cd4, 0.99)
quantile(seu_LN21@meta.data$percent_Cd4, 0.99)
quantile(seu_NEO@meta.data$percent_Cd4, 0.99)

```


```{r}
seu_obj_integrated_filtered <- subset(seu_obj_integrated,
                          subset = percent_Cd19 == 0 &
                          percent_Cd38 == 0 &
                          ((timepoint != "NEO" & percent_Cd4 < 0.38) |
                            (timepoint == "NEO" & percent_Cd4 < 0.22)))

vlnplot_cd4_filt <- qcPlotVln(seu_obj_integrated, 
                          percent_Cd4, 
                          "Cd4 content (%)", 
                          NULL, NULL,
                          experiment_id)

ggsave(filename = "vlnplot_cd4_filteret.png",
       path = results_path,
       plot = vlnplot_cd4_filt)

```

## Look for Type 1 and Type 3 markers

```{r}
Type_3 <- FeaturePlot(seu_obj_integrated_filtered,
                      reduction = "umap",
                      features = c("Rora", "Rorc", "Il22", "Il17a", "Il17f", "Il23r", "Ccr6", "Cd44" ),
                      order = TRUE,
                      min.cutoff = 'q10',
                      label = TRUE)
#ggsave(filename = "feature_Type3.png",
#       path = results_path,
#       plot = Type_3)

Type_1 <- FeaturePlot(seu_obj_integrated_filtered,
                      reduction = "umap",
                      features = c("Tbx21", "Ifng", "Gzma", "Gzmb", "Stat1", "Irf1", "Cd27"),
                      order = TRUE,
                      min.cutoff = 'q10',
                      label = TRUE)
#ggsave(filename = "feature_Type1.png",
#       path = results_path,
#       plot = Type_1)
```

```{r}
DefaultAssay(seu_obj_integrated_filtered) <- "RNA"
seu_obj_integrated_filtered <- JoinLayers(seu_obj_integrated_filtered)
Idents(seu_obj_integrated_filtered) <- "integrated_snn_res.0.3"

cluster9_markers <- FindMarkers(seu_obj_integrated_filtered,
                                                   ident.1 = 9,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)

cluster8_markers <- FindMarkers(seu_obj_integrated_filtered,
                                                   ident.1 = 8,
                                                   only.pos = TRUE, min.pct = 0.25,  min.diff.pct = 0.25,
                                                   logfc.threshold = 0.25)
```

```{r}
clust_markers <- list(cluster8_markers, cluster9_markers)

wb <- createWorkbook()

for (i in 1:2) {
  addWorksheet(wb, sheetName = paste("cluster", i+7))
  writeData(wb, sheet = i, x = clust_markers[[i]], rowNames = TRUE)
}

saveWorkbook(wb, paste(results_path,"cluster_markers_8_9.xlsx", sep = "/"))
```

# Cell annotation
Rename clusters to the discovered cell type. Cluster 0, 1 and 2 are un-annotated (UANN) since there is no clear pattern of delta chain expression.

```{r}
seu_obj_integrated_filtered <- RenameIdents(object = seu_obj_integrated_filtered,
                                "0" = "T3",
                                "1" = "T1",
                                "2" = "T1",
                                "3" = "T3",
                                "4" = "Prolife",
                                "5" = "T3",
                                "6" = "T1",
                                "7" = "T1",
                                "8" = "T1",
                                "9" = "T1",
                                "10" = "UANN"
                                )

# Create a new column in metadata with cell type annotations from idents
seu_obj_integrated_filtered@meta.data$Cell_ann <- Idents(seu_obj_integrated_filtered)

```

## Visualize the data with cell type annotations

```{r}
clusters <- DimPlot(seu_obj_integrated_filtered, reduction = 'umap', label = TRUE)
ggsave("cell_type_clusters.png", clusters, path= results_path)

timepoint_cellann <- DimPlot(seu_obj_integrated_filtered, reduction = 'umap', group.by = 'Cell_ann', split.by = 'timepoint')
#ggsave("timepoint_split_cellann.png", timepoint_cellann, path= results_path)

```

Save the annotated seurat object

```{r}
saveRDS(seu_obj_integrated_filtered, paste(data_path, "seurat_data/seu_obj_annotated.rds", sep = "/"))
```




