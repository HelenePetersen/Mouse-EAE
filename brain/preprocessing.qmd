---
title: "Preprocessing"
format: html
editor: visual
---

## Introduction

WRITE ABOUT THE SET UP HERE.

For clarity, an experiment refers to B0, B11 or B21. An experiments is characterized by all cells being loaded onto the same lane for sequencing. A sample refers to cells comming from the same replicate, that is the same mouse.

## Preparation

In the following section, the single cell data is loaded to create a Seurat object including both gene expression data and hashtag oligo data. Relevant metadata is added.

### Set Up

Relevant libraries are loaded.

```{r, message = false}
library(Seurat)
library(tidyverse)
library(stringr)
library(ggplot2)
library(patchwork)
library(SingleCellExperiment)
library(scDblFinder)
library(scater)
library(table1)
library(grid)
```

Define the path to get the data and save results. The path might have to be changed.

```{r}
data_path <- "/Volumes/Department/Sund/Public/T-Cell-Signalling-and-Development/VB Lab/10x_data/10xRNA_M-EAE-gdT/data/raw_data"

result_path <- "~/Dropbox/Special Project Single Cell/mouse/brain/results/preprocessing"
```

### Data Load

We look at the available folders in the data folder.

```{r}
data_folders <- list.files(path = data_path)
data_folders
```

We wish to preprocess the brain data, so we grep only these files and load them.

```{r, message = FALSE}
data_folders_brain <- data_folders[str_detect(string = data_folders,
                                        pattern = "10xRNA_M-EAE-gdT-B")]

data <- Read10X(data.dir = paste(data_path,
                                 data_folders_brain,
                                 "filtered_feature_bc_matrix",
                                 sep = "/"))
```

The data object is a list of 2 elements: The gene counts (Gene expression) and the expression of hashtag oligonucleotide (Antibody Capture) for each cell. A Seurat object is created from the gene counts. As we only want to include cells present in both data sets, we first identify the cells in common between the two. Furthermore, we will only include genes detected in at least 3 cells.

```{r, warning = FALSE}
joined_cells <- intersect(colnames(data$`Gene Expression`),
                          colnames(data$`Antibody Capture`))

seu_obj <- CreateSeuratObject(counts = data$`Gene Expression`[ , joined_cells],
                              min.cells = 3)

seu_obj
```

The data consists of in total 6198 cells expressing together 13415 genes. The sample information is given by the cell identity classes and save in the metadata as well. However, the origin of the cell is given by 1 if comming from B0, 2 if from B11 and 3 when originating from B21. We wish to use the describe the experiment by the original labels.

```{r}
seu_obj@meta.data$orig.ident <- factor(seu_obj@meta.data$orig.ident,
                                       levels = c("1", "2", "3"),
                                       labels = str_extract(string = data_folders_brain,
                                                            pattern = "B\\d+"))
Idents(seu_obj) <- seu_obj@meta.data$orig.ident 

label(seu_obj@meta.data$orig.ident) <- "Experiment"
table1(data = seu_obj@meta.data,
       ~ orig.ident)
```

We see a huge difference between the number of cells coming from each of the experiments. B21 has 10 times as many cells compared to B0.

### Demultiplexing

The following section follows the guide described in the hashing vignette:

<https://satijalab.org/seurat/archive/v3.1/hashing_vignette.html>

We wish to add the hashtag oligo (HTO) data to the Seurat object to identify which replicate each cell comes from within each experiment. As for the gene counts, we select only the data for relevant cells, that is, cells present in both the gene expression data and the HTO expression data.

```{r}
seu_obj[["HTO"]] <- CreateAssayObject(counts = data$`Antibody Capture`[ , joined_cells])
```

Before assigning the cells back to their sample origins, the HTO data is normalized using centered log ratio (CLR) transformation, where counts were divided by the geometric mean of an HTO across cells in a single experiment and log-transformed:

$$
x_i' = \log\frac{x_i}{(\prod_{i=1}^{n} x_i)^{\frac{1}{n}}}
$$

Here, $x_i$ is the count for a specified HTO in cell $i$, $n$ is the total number of cells.

We use the Seurat function HTODemux() to assign cells to their origin. This function identifies an expression threshold for each HTO to classify cells as either singlets together with their sample-of-origin, doublets and negative cells (empty droplets). The procedure is as follows for a single experiment (lane):

1)  The cells are clustered into $K+1$ clusters, where $K$ is the number of samples (which is 4 in this case).

The following procedure is performed for each HTOs:

2)  We identified the $K$-medoids cluster with the highest average HTO expression and excluded these cells. That is, we use the cluster with the lowest average value as the negative group to determine a background distribution for each HTO based on “negative” cells. Outliers from this distribution is thought to represent positive signals.

3)  The highest 0.5 % HTO expressing cells are excluded from the negative group to get rid of potential outliers.

4)  A negative binomial distribution is fitted to the remaining HTO values. The 0.99 quantile of the distribution is chosen as the HTO-specific threshold.

Afterwards, we can compared the HTO expression for each of the cells. If their expression level for a given HTO exceeds the threshold, they are positive for this HTO. Cells that were positive for only one HTO are classified as singlets. Cells that were positive for two or more HTOs or negative for all HTOs were classified as doublets or negatives, respectively.

The 0.99 quantile for the negative binomial distribution is the default value for the HTODemux function. Lowering the threshold will result in less cells being classified as negatives. However, more cells would be thought as doublets.

```{r, message = FALSE}
# Create list to collect Seurat objects for each lane.
list_seu_obj <- list()

# Experiment labels.
exp_label <- names(table(seu_obj@meta.data$orig.ident))

# Number of experiments/lanes.
exp_numb <- length(exp_label)

for (i in 1:exp_numb){
  # Get the cells from a single 10x lane.
  exp_seu_obj <- subset(seu_obj,
                        orig.ident == exp_label[i])
  
  # Normalize the HTO expression levels.
  exp_seu_obj <- NormalizeData(exp_seu_obj,
                                assay = "HTO",
                                normalization.method = "CLR")
  
  # Demultiplex cells to their the original sample-of-origin.
  exp_seu_obj <- HTODemux(exp_seu_obj,
                           assay = "HTO",
                           positive.quantile = 0.99)
  
  # Save the results.
  list_seu_obj[i] <- exp_seu_obj
}

# Merge the Seurat objects created for each experiment. 
seu_obj <- merge(unlist(list_seu_obj)[[1]],
                 y = unlist(list_seu_obj)[2:exp_numb])

seu_obj
```

Seurat v5 assays store the count data in layers after merge. These layers are joined.

```{r}
seu_obj[["RNA"]] <- JoinLayers(seu_obj[["RNA"]])

seu_obj
```

There are a lot of information from the demultiplexing added to the metadata. Information about the output from HTODemux can be found here:

<https://www.rdocumentation.org/packages/Seurat/versions/5.0.1/topics/HTODemux>

We will chose to focus on HTO_classification.global, HTO_maxID and hash.ID:

-   HTO.maxID - Name of hashtag with the highest signal

-   HTO_classification.global - Global classification result (singlet, doublet or negative)

-   hash.ID - Classification result (replicate, doublet or negative)

We look at the number of cells classified as singlets, doublets and negative/ambiguous cells across the three experiments. 

```{r}
label(seu_obj@meta.data$HTO_classification.global) <- "HTO Classification"
table1(data = seu_obj@meta.data,
       ~ HTO_classification.global | orig.ident,
       caption = "Experiment")
```

We inspect the expression of the hashtags for the each of the classes given by hash.ID to see how the demultiplexing went. 

```{r, message = FALSE}
# Replicate labels.
rep_label <- rownames(seu_obj[["HTO"]])

# Number of experiments/lanes.
rep_numb <- length(rep_label)

hashtag <- c("Replicate 1", "Replicate 2", "Replicate 3")

Idents(seu_obj) <- factor(seu_obj@meta.data$hash.ID,
                          levels = c(rep_label, "Doublet", "Negative"),
                          labels = c(hashtag, "Doublet", "Negative"))

# Create list to gather the plots.
list_ridgeplot <- list()

for (i in 1:exp_numb){
  ridgeplot_sample <- RidgePlot(subset(seu_obj, orig.ident == exp_label[i]),
                                assay = "HTO",
                                features = rep_label,
                                combine = FALSE) 
  
  # Modify the plots from RidgePlot function before combining them.
  for (j in 1:length(ridgeplot_sample)){
    ridgeplot_sample[[j]] <- ridgeplot_sample[[j]] +
      labs(title = paste(exp_label[i],
                         hashtag[j],
                         "HTO"),
           y = "") +
      theme(plot.title = element_text(hjust = -0.2),
            legend.position = "none")}

  list_ridgeplot[[i]] <- wrap_plots(ridgeplot_sample, ncol = 1)
  
  # Save the results for each experiment.
  ggsave(filename = paste("ridgeplot_", exp_label[i], ".png", sep = ""),
         path = result_path,
         plot = list_ridgeplot[[i]],
         width = 6,
         height = 10)
}

# Combine the results for all experiments.
ridgeplot_all <- list_ridgeplot[[1]] | list_ridgeplot[[2]] | list_ridgeplot[[3]]

ggsave(filename = "ridgeplot.png",
       path = result_path,
       plot = ridgeplot_all,
       width = 18,
       height = 10)

ridgeplot_all
```

It seems that the demultiplexing based on data from HTO expression went well. We visualize pairs of HTO signals to further explore the results. 


```{r}
qcPlotScatterHTO <- function(data, feature, feature_name){
  FeatureScatter({{data}}, 
                 feature1 = paste("hto_", feature[1], sep = ""),
                 feature2 = paste("hto_", feature[2], sep = ""),
                 plot.cor = FALSE) +
    xlab(paste(feature_name[1], "HTO Exp.")) +
    ylab(paste(feature_name[2], "HTO Exp.")) + 
    labs(colour = "HTO Classification") 
}


# Create list to store unique pairs.
unique_pairs <- list()

# Generate unique pairs
for (i in 1:rep_numb){
  for (j in 1:rep_numb){
    if (i != j){
      pair <- list(sort(c(rep_label[i], rep_label[j])))
      if (!(pair %in% unique_pairs)){
        unique_pairs <- c(unique_pairs, pair)
      }
    }
  }
}

# Create list to store plots. 
list_scatterHTO <- list()

for (i in 1:length(unique_pairs)){
  rep_label_clean <- str_replace(rep_label, "M.Rep(\\d)", "Rep(\\d)")
  list_scatterHTO[[i]] <- qcPlotScatterHTO(seu_obj,  
                                           unique_pairs[[i]],
                                           str_replace(unique_pairs[[i]], 
                                                       "M.Rep(\\d)", 
                                                       "Rep. \\1"))
}

# Combine the plots.
scatterHTO_all <- (list_scatterHTO[[1]] + theme(legend.position = "none")) | (list_scatterHTO[[2]] + theme(legend.position = "none")) | list_scatterHTO[[3]]

ggsave(filename = "scatterHTO.png",
       path = result_path,
       plot = scatterHTO_all,
       width = 18,
       height = 6)

scatterHTO_all
```

The scatter plots show that negatives are mainly found for cells expressing HTO for replicate 2. Some cells are also classified as doublets though they have high expression of a single HTO. We take a look at the number of RNA molecules across the HTO classification groups.

```{r}
qcPlotVln <- function(seu_obj, group, group_name, feature, feature_name){
  ggplot(data = seu_obj@meta.data,
         mapping = aes(x = {{group}},
                       y = {{feature}})) +
    geom_violin(colour = "#6699CC",
                fill = "#6699CC",
                alpha = 0.2) +
    geom_jitter(size = 1,
                alpha = 0.4) + 
    scale_y_log10() +
    xlab(group_name) + 
    ylab(feature_name) + 
    theme_bw()
}

qcPlotVln(seu_obj, 
          HTO_classification.global, "HTO Classification", 
          nCount_RNA, "Number of molecules") + 
  labs(title = "Number of RNA Molecules Across HTO Classification Groups")

ggsave(filename = "vlnHTO_molecules.png",
       path = result_path,
       width = 10,
       height = 6)
```

From the plots, there seems to be two distributions. This might be because of huge differences in the number of RNA molecules expressed for each experiment. However, the doublets seems to have a higher number of molecules compared to the single cells as expected. We take a look at the number of genes. 

```{r}
qcPlotVln(seu_obj, 
          HTO_classification.global, "HTO Classification", 
          nFeature_RNA, "Number of genes") + 
  labs(title = "Number of Genes Across HTO Classification Groups")

ggsave(filename = "vlnHTO_genes.png",
       path = result_path,
       width = 10,
       height = 6)
```

Again, the distribution of the number of genes per cell tends to be a bit higher for the doublets than the singlets. The HTO demultiplexing results can also be visualized by the heatmap below.

```{r}
heatmap_prefiltering <- HTOHeatmap(seu_obj,
                                   assay = "HTO",
                                   ncells = dim(seu_obj)[1]) +
  ggtitle("HTO Signals Across The Cells") +
  theme(plot.title = element_text(hjust = 0.5))

ggsave(filename = "heatmap_prefiltering.png",
       path = result_path,
       plot = heatmap_prefiltering)

heatmap_prefiltering
```

### Metadata

The percentage of mitochondrial and ribosomal content is added.

```{r}
# Mitochondrial content
seu_obj <- PercentageFeatureSet(seu_obj,
                                pattern = "^mt-",
                                col.name = "percent_mt")

# Ribosomal content
seu_obj <- PercentageFeatureSet(seu_obj,
                                pattern = "R[sp]l",
                                col.name = "percent_ribo")
```

The metadata is cleaned up to remove unrelevant columns. First, let us take a look at what is available at this point. 

```{r}
colnames(seu_obj@meta.data)
```
We wish to remove nCount_HTO, nFeature_HTO, HTO_secondID, HTO_margin, HTO_classification.

```{r}
seu_obj$nCount_HTO         <- NULL
seu_obj$nFeature_HTO       <- NULL
seu_obj$HTO_secondID       <- NULL
seu_obj$HTO_margin         <- NULL
seu_obj$HTO_classification <- NULL
seu_obj$hash.ID            <- NULL
```

We change the HTO_maxID, such that the replicate is decribed only by the digit.

```{r}
seu_obj$HTO_maxID <- factor(str_replace(seu_obj$HTO_maxID,
                                        pattern = "M.Rep(\\d)",
                                        replacement = "\\1"))
```

The names are modified to ensure consistency. 

```{r}
colnames(seu_obj@meta.data) <- c("experiment", "nCount_molecules", "nCount_genes", "replicate", "hto_class", "percent_mt", "percent_ribo")

label(seu_obj@meta.data$hto_class) <- NULL

sample(seu_obj@meta.data)
```

## Filtering

The goal of filtering is to only include true cells that are of high quality based on the quality metrics generated in the previous section.

### Quality Control

The following code are customized plot function for quality control.

```{r}
qcPlotDens <- function(seu_obj, group, group_name, feature, feature_name){
  ggplot(data = seu_obj@meta.data,
         mapping = aes(x = {{feature}},
                       fill = {{group}})) +
    geom_density(alpha = 0.2) +
    scale_x_log10() +
    xlab(feature_name) + 
    ylab("Density") + 
    theme_bw() +
    labs(fill = group_name)
}
```

We inspect the distribution for different variables in the metadata to decide the filtering thresholds. First, let's take a look at the distribution of molecules across experiments. 

```{r}
thres_molecules <- data.frame(group = factor(exp_label),
                              threshold_down = c(10000, 10000, 1000),
                              threshold_up = c(1000, 1000, 100))

qcPlotVln(seu_obj,
          experiment,
          "Experiment",
          nCount_molecules,
          "Number of molecules",
          NULL) +
  geom_boxplot(data = thres_molecules,
               mapping = aes(x = group,
                             y = threshold_up),
               color = "#CC3333") +
  geom_boxplot(data = thres_molecules,
               mapping = aes(x = group,
                             y = threshold_down),
               color = "#CC3333") +
  theme(legend.position = "None") +
  labs(title = "Distribution of The Number of Molecules Across Experiments",
       caption = "Red lines indicates filtering threshold.")

ggsave(filename = "vlnEXP_molecules.png",
       path = result_path,
       width = 6,
       height = 4)
```

```{r}
qcPlotDens(seu_obj,
           experiment,
           "Experiment",
           nCount_molecules,
           "Number of molecules") +
  labs(title = "Distribution of The Number of Molecules Across Experiments")

ggsave(filename = "densEXP_molecules.png",
       path = result_path,
       width = 7,
       height = 4)
```

There is a huge difference between the experiments when it comes to the distribution of the total number of molecules pr. cell. Let us see if the distribution for the number of genes also differs.

```{r}
thres_genes <- data.frame(group = factor(exp_label),
                          threshold_down = c(0, 0, 0),
                          threshold_up = c(0, 0, 0))

qcPlotVln(seu_obj,
          experiment,
          "Experiment",
          nCount_genes,
          "Number of genes",
          NULL) +
  #geom_boxplot(data = thres_genes,
               #mapping = aes(x = group,
                             #y = threshold_up),
               #color = "#CC3333") +
  #geom_boxplot(data = thres_genes,
               #mapping = aes(x = group,
                             #y = threshold_down),
               #color = "#CC3333") +
  theme(legend.position = "None") +
  labs(title = "Distribution of The Number of Genes Across Experiments",
       caption = "Red lines indicates filtering threshold.")

ggsave(filename = "vlnEXP_genes.png",
       path = result_path,
       width = 6,
       height = 4)
```
```{r}
qcPlotDens(seu_obj,
           experiment,
           "Experiment",
           nCount_genes,
           "Number of genes") +
  labs(title = "Distribution of The Number of Genes Across Experiments")

ggsave(filename = "densEXP_genes.png",
       path = result_path,
       width = 7,
       height = 4)
```

```{r}
thres_genes <- data.frame(group = factor(exp_label),
                          threshold_down = c(0, 0, 0),
                          threshold_up = c(0, 0, 0))

qcPlotVln(seu_obj,
          experiment,
          "Experiment",
          percent_mt,
          "Mitochondrial content (%)",
          NULL) +
  #geom_boxplot(data = thres_genes,
               #mapping = aes(x = group,
                             #y = threshold_up),
               #color = "#CC3333") +
  #geom_boxplot(data = thres_genes,
               #mapping = aes(x = group,
                             #y = threshold_down),
               #color = "#CC3333") +
  scale_y_continuous() +
  theme(legend.position = "None") +
  labs(title = "Distribution of The Mitochondrial Content Across Experiments",
       caption = "Red lines indicates filtering threshold.")

ggsave(filename = "vlnEXP_mito.png",
       path = result_path,
       width = 6,
       height = 4)
```


```{r}
thres_genes <- data.frame(group = factor(exp_label),
                          threshold_down = c(0, 0, 0),
                          threshold_up = c(0, 0, 0))

qcPlotVln(seu_obj,
          experiment,
          "Experiment",
          percent_ribo,
          "Ribosomal content (%)",
          NULL) +
  #geom_boxplot(data = thres_genes,
               #mapping = aes(x = group,
                             #y = threshold_up),
               #color = "#CC3333") +
  #geom_boxplot(data = thres_genes,
               #mapping = aes(x = group,
                             #y = threshold_down),
               #color = "#CC3333") +
  scale_y_continuous() +
  theme(legend.position = "None") +
  labs(title = "Distribution of The Ribosomal Content Across Experiments",
       caption = "Red lines indicates filtering threshold.")

ggsave(filename = "vlnEXP_ribo.png",
       path = result_path,
       width = 6,
       height = 4)
```



