---
title: "Integration"
format: html
editor: visual
---

## Preparation

### Set Up

Relevant libraries are loaded.

```{r, message = FALSE}
library(Seurat)
library(tidyverse)
library(stringr)
library(ggplot2)
library(patchwork)
library(SingleCellExperiment)
library(scater)
library(table1)
library(clustree)
```

Define the path to get the data and save results.

```{r}
data_path <- "~/Dropbox/Special Project Single Cell/mouse/brain/data/seurat_data"

result_path <- "~/Dropbox/Special Project Single Cell/mouse/brain/results/integration"
```

### Data Load

The preprocessed data is loaded.

```{r}
seu_obj_preproc <- readRDS(paste(data_path,
                                 "seu_obj_filtered.rds",
                                 sep = "/"))
```

## Integration

### Clustering

The data is clustered using different resolutions by running the functions FindNeigbors and FindClusters.

```{r}
res <- c(0.1, 0.3, 0.5, 0.7)

seu_obj_preproc <- FindNeighbors(seu_obj_preproc, 
                                 dims = 1:30)

seu_obj_preproc <- FindClusters(seu_obj_preproc, 
                                resolution = res)
```

### Batch Effects

There seems to be noticeable batch effects as cells cluster according to the timepoint in which they were taken.

```{r}
DimPlot(seu_obj_preproc, 
        reduction = "umap", 
        group.by = "experiment",
        cols = c("#CC3333", "#0066CC", "#339900"),
        pt.size = 1,
        alpha = 0.8) + 
  labs(title = "") + 
  xlab("UMAP1") +
  ylab("UMAP2")

ggsave(filename = "batch_effects_EXP_pre.png",
       path = result_path,
       width = 10,
       height = 6)
```

We color the cells based on both experiment and replicate.

```{r}
seu_obj_preproc$exp_rep <- paste(seu_obj_preproc$experiment,
                                 seu_obj_preproc$replicate,
                                 sep = "_")
DimPlot(seu_obj_preproc, 
        reduction = "umap", 
        group.by = "exp_rep",
        cols = c("#990000", "#CC3333", "#FF9999", 
                 "#003399", "#0066CC", "#99CCFF",
                 "#336600", "#339900", "#99CC66"),
        pt.size = 1,
        alpha = 0.8) + 
  labs(title = "") + 
  xlab("UMAP1") +
  ylab("UMAP2")

ggsave(filename = "batch_effects_EXP_REP_pre.png",
       path = result_path,
       width = 10,
       height = 6)
```

When coloring the cells according to their assigned cluster for a given resolution, it is clear, that all clusters are not present for a given experiment.

```{r}
for (i in 1:length(res)){
  DimPlot(seu_obj_preproc, 
        reduction = "umap", 
        group.by = paste("RNA_snn_res.", res[i], sep = ""),
        split.by = "experiment",
        cols = c("#990000", "#CC3333", "#FF9999", 
                 "#003399", "#0066CC", "#99CCFF",
                 "#336600", "#339900", "#99CC66"),
        #cols = c("#CC3333", "#0066CC", "#339900", "#FF9933", "#FFFF00"),
        pt.size = 1,
        alpha = 0.5) + 
  labs(title = paste("Resolution", res[i])) + 
  xlab("UMAP1") +
  ylab("UMAP2") +
  theme(plot.title = element_text(hjust = 0))
  
  ggsave(filename = paste("batch_effects_",
                          res[i],
                          "_pre.png",
                          sep = ""),
       path = result_path,
       width = 10,
       height = 6)
}
```

For all the experiments, the cells are forming two major clusters. (Er dette Vg4 og Vg6 chains?)

First, we split the dataset into a list of three seurat objects (B0, B11 and B21).

```{r}
seu_obj_split <- SplitObject(seu_obj_preproc, 
                             split.by = "experiment")
```

We normalize and identify variable features for each timepoint independently.

```{r}
for(i in 1:length(seu_obj_split)){
  seu_obj_split[[i]] <- NormalizeData(object = seu_obj_split[[i]],
                                      normalization.method = "LogNormalize",
                                      scale.factor = 10000)
  seu_obj_split[[i]] <- FindVariableFeatures(object = seu_obj_split[[i]],
                                       selection.method = "vst",
                                       nfeatures = 2000)
}
```

We select features that are repeatedly variable across datasets for integration.

```{r}
features <- SelectIntegrationFeatures(object.list = seu_obj_split)
```

The integration anchors are identified.

```{r}
anchors <- FindIntegrationAnchors(object.list = seu_obj_split,
                                  anchor.features = features)
```

Finally, the data can be integrated using the anchors.

```{r}
seu_obj_integrated <- IntegrateData(anchorset = anchors)
```

We run the standard workflow for visualization and clustering.

```{r}
seu_obj_integrated <- ScaleData(seu_obj_integrated, 
                                verbose = FALSE)
seu_obj_integrated <- RunPCA(seu_obj_integrated,
                             verbose = FALSE)
seu_obj_integrated <- RunUMAP(seu_obj_integrated, 
                              reduction = "pca", 
                              dims = 1:30)
seu_obj_integrated <- FindNeighbors(seu_obj_integrated, 
                                    reduction = "pca", 
                                    dims = 1:30)
seu_obj_integrated <- FindClusters(seu_obj_integrated, 
                                   resolution = res)
```

```{r}
DimPlot(seu_obj_integrated, 
        reduction = "umap", 
        group.by = "experiment",
        cols = c("#CC3333", "#0066CC", "#339900"),
        pt.size = 1,
        alpha = 0.8) + 
  labs(title = "") + 
  xlab("UMAP1") +
  ylab("UMAP2")

ggsave(filename = "batch_effects_EXP_post.png",
       path = result_path,
       width = 10,
       height = 6)
```

```{r}
for (i in 1:length(res)){
  DimPlot(seu_obj_integrated, 
        reduction = "umap", 
        group.by = paste("RNA_snn_res.", res[i], sep = ""),
        split.by = "experiment",
        cols = c("#990000", "#CC3333", "#FF9999", 
                 "#003399", "#0066CC", "#99CCFF",
                 "#336600", "#339900", "#99CC66"),
        #cols = c("#CC3333", "#0066CC", "#339900", "#FF9933", "#FFFF00"),
        pt.size = 1,
        alpha = 0.5) + 
  labs(title = paste("Resolution", res[i])) + 
  xlab("UMAP1") +
  ylab("UMAP2") +
  theme(plot.title = element_text(hjust = 0))
  
  ggsave(filename = paste("batch_effects_",
                          res[i],
                          "_post.png",
                          sep = ""),
       path = result_path,
       width = 10,
       height = 6)
}
```

```{r}
list_dimplot <- list()

for (i in 1:length(res)){
  list_dimplot[[i]] <- DimPlot(seu_obj_integrated,
                               reduction = "umap",
                               group.by = paste("RNA_snn_res.", res[i], sep = ""),
                               cols = c("#990000", "#CC3333", "#FF9999", 
                                        "#003399", "#0066CC", "#99CCFF",
                                        "#336600", "#339900", "#99CC66"),
                               pt.size = 1,
                               alpha = 0.5) + 
    labs(title = paste("Resolution", res[i])) + 
    xlab("UMAP1") +
    ylab("UMAP2") +
    theme(plot.title = element_text(hjust = 0))
}

wrap_plots(list_dimplot, 
           ncol = 2,
           nrow = 2,
           byrow = TRUE)

ggsave(filename = "clusters_post.png",
       path = result_path,
       width = 16,
       height = 10)
```

```{r}
clustree(seu_obj_integrated, 
         prefix = "integrated_snn_res.")
```

```{r}
Idents(seu_obj_integrated) <- "integrated_snn_res.0.1"
```

```{r}
genes <- sort(rownames(seu_obj_integrated))
gamma_chain <- genes[str_detect(genes, pattern = "Tcrg-V")]

list_featureplot <- FeaturePlot(seu_obj_integrated,
                                reduction = "umap",
                                features = gamma_chain,
                                min.cutoff = "q1",
                                label = TRUE,
                                combine = FALSE) 
list_featureplot <- lapply(X = list_featureplot, FUN = function(x){
  x + 
    xlab("UMAP1") +
    ylab("UMAP2")
})

wrap_plots(list_featureplot, 
           ncol = 2,
           nrow = 3,
           byrow = TRUE)

ggsave(filename = "features_post.png",
       path = result_path,
       width = 10,
       height = 12)
```

```{r}
Idents(seu_obj_integrated) <- seu_obj_integrated$experiment
DotPlot(seu_obj_integrated, 
        features = gamma_chain,
        dot.scale = 10) + 
  RotatedAxis() + 
  xlab("Genes") +
  ylab("Cell type")
```
