---
title: "Differential Gene expression"
format: html
editor: visual
---

## Introduction

## Preparation

### Setup

Relevant libraries are loaded.

```{r, message = false}
library(Seurat)
library(tidyverse)
library(stringr)
library(ggplot2)
library(ggrepel)
library(patchwork)
library(SingleCellExperiment)
library(DESeq2)
library(scater)
library(table1)
```

Define the path to get the data and save results.

```{r}
data_path <- "~/Dropbox/Special Project Single Cell/mouse/brain/data/seurat_data"

result_path <- "~/Dropbox/Special Project Single Cell/mouse/brain/results/dge"
```

### Data Load

The preprocessed data is loaded.

```{r}
seu_obj_annotated <- readRDS(paste(data_path,
                                   "seu_obj_annotated.rds",
                                   sep = "/"))
```

We take a look at the amount of cells for each subtype.

```{r}
label(seu_obj_annotated$cell_type) <- "Cell Type"
table1(data = seu_obj_annotated@meta.data,
       ~ cell_type | experiment,
       caption = "Experiment")
```

Type 3 γδT cells are the most abundant subset for both time points. Overall, they make up almost 60% of the cells. 

## Differential Gene Expression (DEG)

In the following, we wish to identify specific genes that are significant differential expressed between the two time points (experiments) for all the cells, and for the subsets individually. 

### Aggregate counts

The DEG analysis is a pseudobulk analysis. We aggregate the counts for all cells within each biological replicate and then using standard bulk RNA-seq methods for DGE. First, a new column is created combining the replicate and the time point.

```{r}
seu_obj_annotated$id <- paste(seu_obj_annotated$experiment,
                              seu_obj_annotated$replicate,
                              sep = "_")
```

We sum all the counts comming from the same replicate within each experiment. The counts are also summed for each cell type comming from the same patient.

```{r}
# Counts were we do not distinguish between cell types.
counts_all <- AggregateExpression(seu_obj_annotated,
                                  group.by = "id",
                                  assays =  "RNA",
                                  return.seurat = FALSE)

# Counts aggregated for each cell type within each experiment for each replicate.
counts_subset <- AggregateExpression(seu_obj_annotated,
                                     group.by = c("cell_type", "id"),
                                     assays =  "RNA",
                                     return.seurat = FALSE)
```

The counts are extracted, and the matrix is converted to a data frame. The counts for the individual subtypes are transposed first.

```{r}
counts_all <- counts_all$RNA
counts_all <- as.data.frame(counts_all)

counts_subset <- counts_subset$RNA
counts_subset <- t(counts_subset)
counts_subset <- as.data.frame(counts_subset)
```

We split the data frame counts_subset using gsub, which replaces all occurrences of "\_" in the rownames containing information about cell type and time point. We end up with a list of data frames looking like counts_all for the aggregated counts for each cell type. For each data frame in the list, the rownames are fixed and the data frame is transposed.

```{r}
split_rows <- gsub("_.*", "", rownames(counts_subset))
cts_split <- split.data.frame(counts_subset,
                              f = factor(split_rows))
cts_split_modified <- lapply(cts_split, function(x){
  rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x))
  t(x)
  })

counts_subset <- cts_split_modified
```

### D11 vs. D0 (all cells)

The following functions runs DESeq2 analysis with counts as input, and colData describing the design. The results can viewed using the vulcano plot function and saved using saveDESeq2Res.

```{r}
DeSeq2Analysis <- function(counts, colData){
  
  # DESeq2 object
  dds <- DESeqDataSetFromMatrix(countData = counts,
                                colData = colData,
                                design = ~ condition)
  
  # Filter genes
  keep <- rowSums(counts(dds)) >= 10
  dds <- dds[keep,]
  
  # Run DESeq2
  dds <- DESeq(dds)
  
  # Print coefficients for the comparison.
  print(resultsNames(dds)[2])
  
  # Results
  res <- results(dds, name = resultsNames(dds)[2])
  res_tbl <- res %>%
    data.frame() %>%
    rownames_to_column(var = "gene") %>%
    as_tibble() %>%
    arrange(padj)
  
  # Significant results
  padj_cutoff <- 0.1
  sig_res <- dplyr::filter(res_tbl, padj < padj_cutoff) %>%
    dplyr::arrange(padj)
  
  res_list <- list(res_tbl, sig_res)
  
  return(res_list)
}

vulcanoPlot <- function(res){
  ggplot(data = res[[1]],
         mapping = aes(x = log2FoldChange,
                       y = -log10(pvalue),
                       label = gene)) + 
  geom_point(alpha = 0.5) + 
  geom_point(data = res[[2]],
             mapping = aes(x = log2FoldChange,
                           y = -log10(pvalue)),
             color = "#CC3333",
             alpha = 0.5) + 
  geom_label_repel(data = res[[2]],
                   color = "black") + 
  theme_light() + 
  xlab("log2FC") +
  ylab("-log10(p)")
}

saveDESeq2Res <- function(res, filename){
  wb <- createWorkbook()
  for (i in 1:length(res)){
    addWorksheet(wb, sheetName = c("complete", "significant")[i])
    writeData(wb,
              sheet = i,
              x = res[[i]],
              rowNames = FALSE)
    }
  saveWorkbook(wb, paste(result_path,
                         "/",
                         filename,
                         ".xlsx",
                         sep = ""))
}

```

We wish to investigate if there is a difference in the gene expression between D0 and D11. We generate sample level metadata.

```{r}
colData <- data.frame(samples = colnames(counts_all))
colData <- colData %>%
  mutate(condition = ifelse(grepl('D0', samples), "D0", "D11")) %>%
  column_to_rownames(var = 'samples')

colData
```

We run the DESeq2 analysis.

```{r, message = FALSE}
res_all <- DeSeq2Analysis(counts_all, colData)
```

We take a look at the significant results:

```{r, warning = FALSE}
vulcanoPlot(res_all) + 
  labs(title = "D11 VS. D0 for all cells",
        caption = "Red points indicate significant results.")
  
ggsave(filename = "vulcano_all.png",
       path = result_path,
       width = 10,
       height = 6)
```

### D11 vs. D0 (Type 1)

We run the analysis for the cells classified as type 1 cells. 

```{r, message = FALSE}
counts_type1 <- counts_subset$`Type 1`
res_type1 <- DeSeq2Analysis(counts_type1, colData)
```

Let us take a look at the results.

We take a look at the significant results:

```{r, warning = FALSE}
vulcanoPlot(res_type1) +
  labs(title = "D11 VS. D0 for type 1 cells",
        caption = "Red points indicate significant results.")

ggsave(filename = "vulcano_type1.png",
       path = result_path,
       width = 10,
       height = 6)
```

### D11 vs. D0 (Type 3)

We run the analysis for the cells classified as type 3 cells. 

```{r, message = FALSE}
counts_type3 <- counts_subset$`Type 3`
res_type3 <- DeSeq2Analysis(counts_type3, colData)
```

We take a look at the results.

```{r, warning = FALSE}
vulcanoPlot(res_type3) +
  labs(title = "D11 VS. D0 for type 3 cells",
        caption = "Red points indicate significant results.")

ggsave(filename = "vulcano_type3.png",
       path = result_path,
       width = 10,
       height = 6)
```

Save all the results in excel files.

```{r}
saveDESeqRes(res_all, "res_all")
saveDESeqRes(res_type1, "res_type1")
saveDESeqRes(res_type3, "res_type3")
```
