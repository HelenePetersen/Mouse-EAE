---
title: "Preprocessing"
format: html
editor: visual
---

## Introduction

Multiple sclerosis (MS) is an autoimmune condition, where the immune system attacks myelin coat in brain and spinal cord. This leads to lack of coordination, balance, muscle spasms, vision problems, paralysis, etc. In Denmark, approximately 14,500 individuals are diagnosed with MS. It is estimated that 2.3 million people have MS worldwide. Treatments for MS seek to slow disease progression and manage symptoms, but the disease can not be cured.

γδT cells producing the pro-inflammatory cytokines interleukin-17A (IL-17A) and IL-17F (γδT17) can mediate local immune responses against fungal or bacterial infections, contribute to tissue homeostasis during anti-viral responses, and regulate body thermogenesis. Moreover, γδT17 cells are involved in the pathology of local inflammatory immune diseases including inflammation in the central nervous system (CNS). Studies have shown that tissue resident γδT17 cells express mainly Vγ6 or Vγ4 TCR chains.

This project aims to characterize neuropathogenic γδT cells by experimental autoimmune encephalomyelitis (EAE) - an animal model of CNS demyelinating diseases. EAE is induced in mice, and γδT cells are sorted and sequenced for 3 replicates on the day of induction (B0, naive), 11 days after EAE (B11) and 21 days after EAE (B21). However, an error occurred in the experiment B21, so this data will not be included.

For clarity, an experiment refers to B0/D0 or B11/D11. An experiment is characterized by all cells being loaded onto the same lane for sequencing. A sample refers to cells coming from the same replicate, that is the same mouse.

## Preparation

In the following section, the single cell data is loaded to create a Seurat object including both gene expression data and hashtag oligo data. Relevant metadata is added.

### Set Up

Relevant libraries are loaded.

```{r, message = FALSE}
library(Seurat)
library(tidyverse)
library(stringr)
library(ggplot2)
library(patchwork)
library(SingleCellExperiment)
library(scDblFinder)
library(scater)
library(table1)
library(grid)
```

Define the path to get the data and save results. The path might have to be changed.

```{r}
data_path <- "/Volumes/10x_data/10xRNA_M-EAE-gdT/data/raw_data"


result_path <- "~/Dropbox/Special Project Single Cell/mouse/brain/results/preprocessing"
```

### Data Load

We look at the available folders in the data folder.

```{r}
data_folders <- list.files(path = data_path)
data_folders
```

We wish to preprocess the brain data, so we grep only these files and load them (except from B21).

```{r, message = FALSE}
data_folders_brain <- data_folders[str_detect(string = data_folders,
                                        pattern = "10xRNA_M-EAE-gdT-B")]

data <- Read10X(data.dir = paste(data_path,
                                 data_folders_brain[1:2],
                                 "filtered_feature_bc_matrix",
                                 sep = "/"))
```

The data object is a list of 2 elements: The gene counts (Gene expression) and the expression of hashtag oligonucleotide (Antibody Capture) for each cell. A Seurat object is created from the gene counts. As we only want to include cells present in both data sets, we first identify the cells in common between the two. Furthermore, we will only include genes detected in at least 3 cells.

```{r, warning = FALSE}
joined_cells <- intersect(colnames(data$`Gene Expression`),
                          colnames(data$`Antibody Capture`))

seu_obj <- CreateSeuratObject(counts = data$`Gene Expression`[ , joined_cells],
                              min.cells = 3)

seu_obj
```

The data consists of in total 1316 cells expressing together 13114 genes. The sample information is given by the cell identity classes and save in the metadata as well. However, the origin of the cell is given by 1 if comming from B0 and 2 if from B11. We wish to describe the experiment by the original labels but rename them to D0 and D11 (D = day).

```{r}
seu_obj@meta.data$orig.ident <- factor(seu_obj@meta.data$orig.ident,
                                       levels = as.character(unique(seu_obj@meta.data$orig.ident)),
                                       labels = str_extract(string = data_folders_brain[1:2],
                                                            pattern = "B\\d+"))

seu_obj@meta.data$orig.ident <- str_replace(seu_obj@meta.data$orig.ident,
                               pattern = "B",
                               replacement = "D")

Idents(seu_obj) <- seu_obj@meta.data$orig.ident

label(seu_obj@meta.data$orig.ident) <- "Experiment"
table1(data = seu_obj@meta.data,
       ~ orig.ident)
```

We see that a majority of the cells are comming from D11. Finally, we add the hashtag oligo (HTO) data to the Seurat object to identify which replicate each cell comes from within each experiment later on. As for the gene counts, we select only the data for relevant cells, that is, cells present in both the gene expression data and the HTO expression data.

```{r}
seu_obj[["HTO"]] <- CreateAssayObject(counts = data$`Antibody Capture`[ , joined_cells])
```

### Quality Metrics

The percentage of mitochondrial and ribosomal content is added.

```{r}
# Mitochondrial content
seu_obj <- PercentageFeatureSet(seu_obj,
                                pattern = "^mt-",
                                col.name = "percent_mt")

# Ribosomal content
seu_obj <- PercentageFeatureSet(seu_obj,
                                pattern = "R[sp]l",
                                col.name = "percent_ribo")
```

Let us take a look at what is available at this point.

```{r}
colnames(seu_obj@meta.data)
```

The names are modified.

```{r}
colnames(seu_obj@meta.data)[1:3] <- c("experiment", 
                                      "nCount_molecules", 
                                      "nCount_genes")
```

## Filtering

The goal of filtering is to only include true cells that are of high quality based on the quality metrics generated in the previous section.

### Quality Control

The following code are customized plot function for quality control.

```{r}
# Violin plot
qcPlotVln <- function(seu_obj, group, group_name, feature, feature_name){
  ggplot(data = seu_obj@meta.data,
         mapping = aes(x = {{group}},
                       y = {{feature}})) +
    geom_violin(colour = "#6699CC",
                fill = "#6699CC",
                alpha = 0.2) +
    geom_jitter(size = 1,
                alpha = 0.4) + 
    scale_y_log10() +
    xlab(group_name) + 
    ylab(feature_name) + 
    theme_bw()
}

# Density plot
qcPlotDens <- function(seu_obj, group, group_name, feature, feature_name){
  ggplot(data = seu_obj@meta.data,
         mapping = aes(x = {{feature}},
                       color = {{group}},
                       fill = {{group}})) +
    scale_color_manual(values = c("#6699CC", "#CC3333")) +
    scale_fill_manual(values = c("#6699CC", "#CC3333")) +
    geom_density(alpha = 0.2) +
    scale_x_log10() +
    xlab(feature_name) + 
    ylab("Density") + 
    theme_bw() +
    labs(fill = group_name) +
    guides(color = "none")
}

# Scatter plot
qcPlotScatter <- function(seu_obj, feature1, feature2, feature_name){
  ggplot(data = seu_obj@meta.data,
         mapping = aes(x = {{feature1}},
                       y = {{feature2}})) +
  geom_point(colour = "#6699CC",
             fill = "#6699CC",
             alpha = 0.5) +
  xlab(feature_name[1]) + 
  ylab(feature_name[2]) +
  theme_bw()
}

# Experiment labels.
exp_label <- names(table(seu_obj@meta.data$experiment))

# Number of experiments/lanes.
exp_numb <- length(exp_label)
```

We inspect the distribution for different variables in the metadata to decide the filtering thresholds. First, let's take a look at the distribution of molecules across experiments.

```{r}
thres_molecules <- data.frame(group = factor(exp_label),
                              threshold_down = c(1000, 1200),
                              threshold_up = c(9000, 10000))

qcPlotVln(seu_obj,
          experiment,
          "Experiment",
          nCount_molecules,
          "Number of molecules") +
  geom_boxplot(data = thres_molecules,
               mapping = aes(x = group,
                             y = threshold_up),
               color = "#CC3333") +
  geom_boxplot(data = thres_molecules,
               mapping = aes(x = group,
                             y = threshold_down),
               color = "#CC3333") +
  theme(legend.position = "None") +
  labs(title = "Distribution of The Number of Molecules Across Experiments",
       caption = "Red lines indicates filtering threshold.")

ggsave(filename = "vlnEXP_molecules.png",
       path = result_path,
       width = 6,
       height = 4)
```

```{r}
qcPlotDens(seu_obj,
           experiment,
           "Experiment",
           nCount_molecules,
           "Number of molecules") +
  geom_vline(data = thres_molecules,
             mapping = aes(xintercept = threshold_down,
                           color = group),
             linetype="dashed") +
  geom_vline(data = thres_molecules,
             mapping = aes(xintercept = threshold_up,
                           color = group),
             linetype="dashed") +
  labs(title = "Distribution of The Number of Molecules Across Experiments")

ggsave(filename = "densEXP_molecules.png",
       path = result_path,
       width = 7,
       height = 4)
```

There is not a huge difference between the experiments when it comes to the distribution of the total number of molecules pr. cell. Let us take a look on the distribution for the number of genes.

```{r, warning = FALSE}
thres_genes <- data.frame(group = factor(exp_label),
                          threshold_down = c(700, 800),
                          threshold_up = c(2500, 3000))

qcPlotVln(seu_obj,
          experiment,
          "Experiment",
          nCount_genes,
          "Number of genes") +
  geom_boxplot(data = thres_genes,
               mapping = aes(x = group,
                             y = threshold_up),
               color = "#CC3333") +
  geom_boxplot(data = thres_genes,
               mapping = aes(x = group,
                             y = threshold_down),
               color = "#CC3333") +
  theme(legend.position = "None") +
  labs(title = "Distribution of The Number of Genes Across Experiments",
       caption = "Red lines indicates filtering threshold.")

ggsave(filename = "vlnEXP_genes.png",
       path = result_path,
       width = 6,
       height = 4)
```

```{r}
qcPlotDens(seu_obj,
           experiment,
           "Experiment",
           nCount_genes,
           "Number of genes") +
    geom_vline(data = thres_genes,
             mapping = aes(xintercept = threshold_down,
                           color = group),
             linetype="dashed") +
  geom_vline(data = thres_genes,
             mapping = aes(xintercept = threshold_up,
                           color = group),
             linetype="dashed") +
  labs(title = "Distribution of The Number of Genes Across Experiments")

ggsave(filename = "densEXP_genes.png",
       path = result_path,
       width = 7,
       height = 4)
```

We take a look at the number of RNA molecules pr. cell vs. the number of genes.

```{r, warning = FALSE}
# Create list to store plots. 
list_scatter <- list()

for (i in 1:exp_numb){
  list_scatter[[i]] <- qcPlotScatter(subset(seu_obj,
                                            experiment == exp_label[i]),
                                     nCount_molecules,
                                     nCount_genes,
                                     c("Number of molecules", "Number of genes")) +
    geom_vline(xintercept = c(thres_molecules[i, ]$threshold_down,
                              thres_molecules[i, ]$threshold_up),
               colour = "#CC3333") +
    geom_hline(yintercept = c(thres_genes[i, ]$threshold_down,
                              thres_genes[i, ]$threshold_up),
               colour = "#CC3333") +
    labs(title = exp_label[i])
}

# Combine the plots.
list_scatter[[1]] | list_scatter[[2]] 

ggsave(filename = "scatterEXP.png",
       path = result_path,
       width = 12,
       height = 6)
```

The number of molecules vs. genes seems to be nicely correlated. Data points in the bottom right corner would indicate low quality cells, where the same genes are being sequenced over and over again. Cells in the top left corner could be doublets resulting in a large number of detected genes.

When few genes are being expressed, this indicates, that these cells might be exhausted (and potentially dying) cells. A high mitochondrial content would indicate dying cells.

```{r, message = FALSE}
thres_mito <- data.frame(group = factor(exp_label),
                          threshold_down = c(NA, NA),
                          threshold_up = c(3, 3))

qcPlotVln(seu_obj,
          experiment,
          "Experiment",
          percent_mt,
          "Mitochondrial content (%)") +
  geom_boxplot(data = thres_mito,
               mapping = aes(x = group,
                             y = threshold_up),
               color = "#CC3333") +
  scale_y_continuous() +
  theme(legend.position = "None") +
  labs(title = "Distribution of The Mitochondrial Content Across Experiments",
       caption = "Red lines indicates filtering threshold.")

ggsave(filename = "vlnEXP_mito.png",
       path = result_path,
       width = 6,
       height = 4)
```

We will only keep cells with less that 3% mitochondrial content. Finally, we investigate how large a percentage of the genes are ribosomal genes.

```{r, message = FALSE}
qcPlotVln(seu_obj,
          experiment,
          "Experiment",
          percent_ribo,
          "Ribosomal content (%)") +
  scale_y_continuous() +
  theme(legend.position = "None") +
  labs(title = "Distribution of The Ribosomal Content Across Experiments")

ggsave(filename = "vlnEXP_ribo.png",
       path = result_path,
       width = 6,
       height = 4)
```

We filter the cells based on the chosen thresholds for QC. We also remove all ribosomal genes.

```{r, warning = FALSE}
# Create list to collect Seurat objects for each experiment.
list_seu_obj <- list()

for (i in 1:exp_numb){
  # Get the cells from the experiment.
  exp_seu_obj <- subset(seu_obj,
                        experiment == exp_label[i])
  
  exp_seu_obj <- subset(exp_seu_obj,
                        subset = nCount_molecules > thres_molecules$threshold_down[i] & nCount_molecules < thres_molecules$threshold_up[i] & nCount_genes >  thres_genes$threshold_down[i] & nCount_genes < thres_genes$threshold_up[i] & percent_mt < thres_mito$threshold_up[i])
  
  # Save the results.
  list_seu_obj[i] <- exp_seu_obj
}

# Merge the Seurat objects created for each experiment. 
seu_obj_filtered <- merge(unlist(list_seu_obj)[[1]],
                          y = unlist(list_seu_obj)[2:exp_numb])

# Join layers.
seu_obj_filtered[["RNA"]] <- JoinLayers(seu_obj_filtered[["RNA"]])

# Remove ribosomal genes.
seu_obj_filtered <- seu_obj_filtered[!grepl("R[sp]l", rownames(seu_obj_filtered)), ]

# Add HTO data.
seu_obj_filtered[["HTO"]] <- CreateAssayObject(counts = seu_obj@assays$HTO$data[, colnames(seu_obj_filtered)])
```

Lets us see how many cells were removed.

```{r}
filtering_numb <- tibble(experiment = exp_label,
                         n_old = table(seu_obj@meta.data$experiment),
                         n_new = table(seu_obj_filtered@meta.data$experiment)) %>%
  mutate(n_removed = n_old - n_new,
         p_removed = round(n_removed/n_old*100, digits = 2)) 

filtering_numb
```

The percentage of cells removed from each experiment is around 7%, which seems reasonable. We see how many cells and genes are removed in total.

```{r}
print(paste("Genes removed: ", 
            dim(seu_obj)[1] - dim(seu_obj_filtered)[1], 
            " (",
            round((dim(seu_obj)[1] - dim(seu_obj_filtered)[1])/dim(seu_obj)[1] * 100, 
                  digits = 2),
            "%)",
      sep = ""))

print(paste("Cells removed: ", 
            dim(seu_obj)[2] - dim(seu_obj_filtered)[2], 
            " (",
            round((dim(seu_obj)[2] - dim(seu_obj_filtered)[2])/dim(seu_obj)[2] * 100, 
                  digits = 2),
            "%)",
      sep = ""))
```

The filtered Seurat object is saved. 

```{r}
saveRDS(seu_obj_filtered, 
        file = "data/seurat_data/seu_obj_filtered.rds")
```

## Demultiplexing

We wish to demultiplex cells to their the original sample-of-origin and identify doublets. The following section follows the guide described in the hashing vignette:

<https://satijalab.org/seurat/archive/v3.1/hashing_vignette.html>

### Assign Cells To Replicate

Before assigning the cells back to their sample origins, the HTO data is normalized using centered log ratio (CLR) transformation, where counts were divided by the geometric mean of an HTO across cells in a single experiment and log-transformed:

$$
x_i' = \log\frac{x_i}{(\prod_{i=1}^{n} x_i)^{\frac{1}{n}}}
$$

Here, $x_i$ is the count for a specified HTO in cell $i$, $n$ is the total number of cells.

We use the Seurat function HTODemux() to assign cells to their origin. This function identifies an expression threshold for each HTO to classify cells as either singlets together with their sample-of-origin, doublets and negative cells (empty droplets). The procedure is as follows for a single experiment (lane):

1)  The cells are clustered into $K+1$ clusters, where $K$ is the number of samples (which is 4 in this case).

The following procedure is performed for each HTOs:

2)  We identified the $K$-medoids cluster with the highest average HTO expression and excluded these cells. That is, we use the cluster with the lowest average value as the negative group to determine a background distribution for each HTO based on “negative” cells. Outliers from this distribution is thought to represent positive signals.

3)  The highest 0.5 % HTO expressing cells are excluded from the negative group to get rid of potential outliers.

4)  A negative binomial distribution is fitted to the remaining HTO values. The 0.99 quantile of the distribution is chosen as the HTO-specific threshold.

Afterwards, we can compared the HTO expression for each of the cells. If their expression level for a given HTO exceeds the threshold, they are positive for this HTO. Cells that were positive for only one HTO are classified as singlets. Cells that were positive for two or more HTOs or negative for all HTOs were classified as doublets or negatives, respectively.

The 0.99 quantile for the negative binomial distribution is the default value for the HTODemux function. Lowering the threshold will result in less cells being classified as negatives. However, more cells would be thought as doublets.

```{r, message = FALSE, warning = FALSE}
# Create list to collect Seurat objects for each lane.
list_seu_obj <- list()

for (i in 1:exp_numb){
  # Get the cells from a single 10x lane.
  exp_seu_obj <- subset(seu_obj_filtered,
                        experiment == exp_label[i])
  
  # Normalize the HTO expression levels.
  exp_seu_obj <- NormalizeData(exp_seu_obj,
                               assay = "HTO",
                               normalization.method = "CLR",
                               verbose = FALSE)
  
  # Demultiplex cells to their the original sample-of-origin.
  exp_seu_obj <- HTODemux(exp_seu_obj,
                          assay = "HTO",
                          positive.quantile = 0.99)
  
  # Save the results.
  list_seu_obj[i] <- exp_seu_obj
}

# Merge the Seurat objects created for each experiment. 
seu_obj_filtered <- merge(unlist(list_seu_obj)[[1]],
                          y = unlist(list_seu_obj)[2:exp_numb])

seu_obj_filtered
```

Seurat v5 assays store the count data in layers after merge. These layers are joined.

```{r}
seu_obj_filtered[["RNA"]] <- JoinLayers(seu_obj_filtered[["RNA"]])

seu_obj_filtered
```

There are a lot of information from the demultiplexing added to the metadata. Information about the output from HTODemux can be found here:

<https://www.rdocumentation.org/packages/Seurat/versions/5.0.1/topics/HTODemux>

We will chose to focus on HTO_classification.global, HTO_maxID and hash.ID:

-   HTO.maxID - Name of hashtag with the highest signal.

-   HTO_classification.global - Global classification result (singlet, doublet or negative).

-   hash.ID - Classification result (replicate, doublet or negative).

We look at the number of cells classified as singlets, doublets and negative/ambiguous cells across the three experiments.

```{r}
label(seu_obj_filtered@meta.data$HTO_classification.global) <- "HTO Classification"
table1(data = seu_obj_filtered@meta.data,
       ~ HTO_classification.global | experiment,
       caption = "Experiment")
```

We inspect the expression of the hashtags for the each of the classes given by hash.ID to see how the demultiplexing went.

```{r, message = FALSE}
# Replicate labels.
rep_label <- rownames(seu_obj_filtered[["HTO"]])

# Number of experiments/lanes.
rep_numb <- length(rep_label)

hashtag <- c("Replicate 1", "Replicate 2", "Replicate 3")

Idents(seu_obj_filtered) <- factor(seu_obj_filtered@meta.data$hash.ID,
                                   levels = c(rep_label, "Doublet", "Negative"),
                                   labels = c(hashtag, "Doublet", "Negative"))

# Create list to gather the plots.
list_ridgeplot <- list()

for (i in 1:exp_numb){
  ridgeplot_sample <- RidgePlot(subset(seu_obj_filtered, 
                                       experiment == exp_label[i]),
                                assay = "HTO",
                                features = rep_label,
                                combine = FALSE) 
  
  # Modify the plots from RidgePlot function before combining them.
  for (j in 1:length(ridgeplot_sample)){
    ridgeplot_sample[[j]] <- ridgeplot_sample[[j]] +
      labs(title = paste(exp_label[i],
                         hashtag[j],
                         "HTO"),
           y = "") +
      theme(plot.title = element_text(hjust = -0.2),
            legend.position = "none")}

  list_ridgeplot[[i]] <- wrap_plots(ridgeplot_sample, ncol = 1)
  
  # Save the results for each experiment.
  ggsave(filename = paste("ridgeplot_", exp_label[i], ".png", sep = ""),
         path = result_path,
         plot = list_ridgeplot[[i]],
         width = 6,
         height = 10)
}

# Combine the results for all experiments.
ridgeplot_all <- list_ridgeplot[[1]] | list_ridgeplot[[2]] 

ggsave(filename = "ridgeplot.png",
       path = result_path,
       plot = ridgeplot_all,
       width = 12,
       height = 10)

ridgeplot_all
```

It seems that the demultiplexing based on data from HTO expression went well. We visualize pairs of HTO signals to further explore the results.

```{r}
qcPlotScatterHTO <- function(data, feature, feature_name){
  FeatureScatter({{data}}, 
                 feature1 = paste("hto_", feature[1], sep = ""),
                 feature2 = paste("hto_", feature[2], sep = ""),
                 plot.cor = FALSE) +
    xlab(paste(feature_name[1], "HTO Exp.")) +
    ylab(paste(feature_name[2], "HTO Exp.")) + 
    labs(colour = "HTO Classification") 
}


# Create list to store unique pairs.
unique_pairs <- list()

# Generate unique pairs
for (i in 1:rep_numb){
  for (j in 1:rep_numb){
    if (i != j){
      pair <- list(sort(c(rep_label[i], rep_label[j])))
      if (!(pair %in% unique_pairs)){
        unique_pairs <- c(unique_pairs, pair)
      }
    }
  }
}

# Create list to store plots. 
list_scatterHTO <- list()

for (i in 1:length(unique_pairs)){
  rep_label_clean <- str_replace(rep_label, "M.Rep(\\d)", "Rep(\\d)")
  list_scatterHTO[[i]] <- qcPlotScatterHTO(seu_obj_filtered,  
                                           unique_pairs[[i]],
                                           str_replace(unique_pairs[[i]], 
                                                       "M.Rep(\\d)", 
                                                       "Rep. \\1"))
}

# Combine the plots.
scatterHTO_all <- (list_scatterHTO[[1]] + theme(legend.position = "none")) | (list_scatterHTO[[2]] + theme(legend.position = "none")) | list_scatterHTO[[3]]

ggsave(filename = "scatterHTO.png",
       path = result_path,
       plot = scatterHTO_all,
       width = 18,
       height = 6)

scatterHTO_all
```

The scatter plots show that negatives are mainly found for cells expressing HTO for replicate 2. Some cells are also classified as doublets though they have high expression of a single HTO. We take a look at the number of RNA molecules across the HTO classification groups.

```{r}
qcPlotVln(seu_obj_filtered, 
          HTO_classification.global, "HTO Classification", 
          nCount_molecules, "Number of molecules") + 
  labs(title = "Number of RNA Molecules Across HTO Classification Groups")

ggsave(filename = "vlnHTO_molecules.png",
       path = result_path,
       width = 10,
       height = 6)
```

From the plots, there seems to be two distributions. This might be because of huge differences in the number of RNA molecules expressed for each experiment. However, the doublets seems to have a higher number of molecules compared to the single cells as expected. We take a look at the number of genes.

```{r}
qcPlotVln(seu_obj_filtered, 
          HTO_classification.global, "HTO Classification", 
          nCount_genes, "Number of genes") + 
  labs(title = "Number of Genes Across HTO Classification Groups")

ggsave(filename = "vlnHTO_genes.png",
       path = result_path,
       width = 10,
       height = 6)
```

Again, the distribution of the number of genes per cell tends to be a bit higher for the doublets than the singlets. The HTO demultiplexing results can also be visualized by the heatmap below.

```{r}
heatmap_prefiltering <- HTOHeatmap(seu_obj_filtered,
                                   assay = "HTO",
                                   ncells = dim(seu_obj_filtered)[1]) +
  ggtitle("HTO Signals Across The Cells") +
  theme(plot.title = element_text(hjust = 0.5))

ggsave(filename = "heatmap_prefiltering.png",
       path = result_path,
       plot = heatmap_prefiltering)

heatmap_prefiltering
```

### Remove Metadata

The metadata is cleaned up to remove unrelevant columns. We wish to remove nCount_HTO, nFeature_HTO, HTO_secondID, HTO_margin, HTO_classification.

```{r}
seu_obj_filtered$nCount_HTO         <- NULL
seu_obj_filtered$nFeature_HTO       <- NULL
seu_obj_filtered$HTO_secondID       <- NULL
seu_obj_filtered$HTO_margin         <- NULL
seu_obj_filtered$HTO_classification <- NULL
seu_obj_filtered$hash.ID            <- NULL
```

We change the HTO_maxID, such that the replicate is decribed only by the digit.

```{r}
seu_obj_filtered$HTO_maxID <- factor(str_replace(seu_obj_filtered$HTO_maxID,
                                                 pattern = "M.Rep(\\d)",
                                                 replacement = "\\1"))
```

The names are modified, and we take a look at the available metadata.

```{r}
colnames(seu_obj_filtered@meta.data)[6:7] <- c("replicate", "hto_class")

seu_obj_filtered@meta.data[1:10,]
```

## Doublet Detection

We wish to identify doublets using the scDblFinder package, which gathers various methods for the detection and handling of doublets. As seen in the previous section, the HTODemux function can identify doublets, if cells express high levels of multiple HTOs. One limitation of this approach is that doublets of cells marked with the same HTO are not detected (intra-sample doublets). We will try to recover the remaining doublets based on their similarity with known doublets (inter-sample doublets) in the gene expression space. Relevant links are given below:

<https://bioconductor.org/packages/release/bioc/vignettes/scDblFinder/inst/doc/recoverDoublets.html>

<https://bioconductor.org/books/3.13/OSCA.advanced/doublet-detection.html#doublet-detection-in-multiplexed-experiments>

### Normalization

Before doublet detection, we must normalize and find variable features according to the standard Seurat workflow. The counts are normalized by dividing the count for each gene pr. cell by the total counts for that cell and multiplied by a scale factor. This is then log transformed using the natural log.

```{r}
seu_obj_filtered <- NormalizeData(seu_obj_filtered,
                                  normalization.method = "LogNormalize",
                                  scale.factor = 10000,
                                  verbose = FALSE)
```

### Identification of Highly Variable Features

We find a subset of features that exhibit high cell-to-cell variation in the dataset. These genes are thought be the most biological relevant genes, and by focussing on these features the computations will become more efficient in the downstream analysis. We choose to find the 2000 most variable genes, which is the default value for the FindVariableFeatures function.

```{r}
seu_obj_filtered <- FindVariableFeatures(seu_obj_filtered,
                                         selection.method = "vst",
                                         nfeatures = 2000,
                                         verbose = FALSE)
```

### Scale Data

The normalized counts for the variable genes are scaled, that is, the mean expression across cells becomes 0 and the variance across cells is 1. This step is a standard step prior to dimensional reduction techniques.

```{r}
seu_obj_filtered <- ScaleData(seu_obj_filtered,
                              features = VariableFeatures(object = seu_obj_filtered),
                              verbose = FALSE)
```

### Dimensionality Reduction

To visualize the data in an UMAP plot later on, linear dimensional reduction, PCA, is performed.

```{r}
seu_obj_filtered <- RunPCA(seu_obj_filtered,
                           features = VariableFeatures(object = seu_obj_filtered),
                           verbose = FALSE)

ElbowPlot(seu_obj_filtered, reduction = "pca")
```

From the elbow plot, we should be fine with using above 20 dimensions.

```{r}
seu_obj_filtered <- RunUMAP(seu_obj_filtered, 
                            dims = 1:30,
                            verbose = FALSE)
```

### Unmarked Doublets

We convert the Seurat object to a sce object and save the variable features to be used for doublet detection.

```{r}
sce <- as.SingleCellExperiment(seu_obj_filtered,
                               assay = "RNA")
```

For each cell, we calculate the proportion of its nearest neighbors that are known doublets (inter-sample doublets) within each experiment. Intra-sample doublets should have high proportions under the assumption that their gene expression profiles are similar to inter-sample doublets.

```{r}
sce$doublet <- sce$hto_class == "Doublet"

doublet_pred <- c()

for (i in 1:exp_numb){
  exp_sce <- sce[, sce$experiment == exp_label[i]]
  
  doublets <- recoverDoublets(exp_sce,
                              use.dimred = "PCA",
                              doublets = exp_sce$doublet,
                              samples = c(table(exp_sce$replicate)))
  
  rownames(doublets) <- colnames(exp_sce)
  doublet_pred <- rbind(doublet_pred, doublets)
}

pred <- doublet_pred$predicted
names(pred) <- rownames(doublet_pred)

seu_obj_filtered <- AddMetaData(object = seu_obj_filtered,
                                metadata = pred,
                                col.name = "pred")
```

We visualize the results.

```{r}
seu_obj_filtered$doublet <- rep("Singlet", dim(seu_obj_filtered)[2])
seu_obj_filtered$doublet[seu_obj_filtered$hto_class == "Doublet"] <- "Inter-sample doublet"
seu_obj_filtered$doublet[seu_obj_filtered$pred] <- "Intra-sample doublet"

DimPlot(seu_obj_filtered, 
        group.by = "doublet",
        cols = c("#CC3333", "#003399", "#999999"),
        pt.size = 1) + 
  labs(title = "") + 
  xlab("UMAP1") +
  ylab("UMAP2")

ggsave(filename = "umap_recdoublets.png",
       path = result_path,
       width = 10,
       height = 6)
```

Intra-sample doublets seem to somewhat cluster together.

```{r}
# Create list to store plots. 
list_scatter <- list()

for (i in 1:exp_numb){
  exp_seu_obj <- subset(seu_obj_filtered,
                        experiment == exp_label[i])
  
  list_scatter[[i]] <- ggplot(data = exp_seu_obj@meta.data,
                              mapping = aes(x = nCount_molecules,
                                            y = nCount_genes,
                                            color = doublet)) +
    scale_color_manual(values = c("#CC3333", "#003399", "#999999")) + 
    geom_point(alpha = 0.5) +
    xlab("Number of molecules") + 
    ylab("Number of genes") +
    theme_bw() + 
    labs(title = exp_label[i])
}

# Combine the plots.
scatterEXP_recdoublets <- (list_scatter[[1]] + theme(legend.position = "none")) | list_scatter[[2]] 

ggsave(filename = "scatterEXP_doublets.png",
       path = result_path,
       plot = scatterEXP_recdoublets,
       width = 12,
       height = 6)

scatterEXP_recdoublets
```

From the figure above, we see cells in the top right corner above the known doublets especially for D11. This suggests that the filtering thresholds for number of genes could be decreased to 2500. However, the number of predicted doublets are quite low, and it is hard to tell, if the predictions are reasonable from a biological point of view. 

```{r}
(list_scatter[[1]] + theme(legend.position = "none")) | list_scatter[[2]] + geom_hline(yintercept = 2500) 

ggsave(filename = "scatterEXP_recdoublets_thres.png",
       path = result_path,
       width = 12,
       height = 6)
```

We visualize the results from the HTODemux function alone. 

```{r}
# Create list to store plots. 
list_scatter <- list()

seu_obj_filtered$hto_class <- factor(seu_obj_filtered$hto_class,
                                     levels = c("Singlet", "Doublet", "Negative"))

for (i in 1:exp_numb){
  exp_seu_obj <- subset(seu_obj_filtered,
                        experiment == exp_label[i])
  
  list_scatter[[i]] <- ggplot(data = exp_seu_obj@meta.data,
                              mapping = aes(x = nCount_molecules,
                                            y = nCount_genes,
                                            color = hto_class)) +
    scale_color_manual(values = c("#339900", "#CC3333", "#0066CC")) +
    #c("#336600", "#CC3333", "#003399")) + 
    geom_point(alpha = 0.5) +
    xlab("Number of molecules") + 
    ylab("Number of genes") +
    theme_bw() + 
    labs(title = exp_label[i])
}

# Combine the plots.
scatterEXP_hto <- (list_scatter[[1]] + theme(legend.position = "none")) | list_scatter[[2]] 

ggsave(filename = "scatterEXP_hto.png",
       path = result_path,
       plot = scatterEXP_hto,
       width = 12,
       height = 6)

scatterEXP_hto
```

```{r}
(list_scatter[[1]] + theme(legend.position = "none")) | list_scatter[[2]] + geom_hline(yintercept = 2500) 

ggsave(filename = "scatterEXP_hto_thres.png",
       path = result_path,
       width = 12,
       height = 6)
```

### Remove Doublets

The intra-sample doublet are removed from the final filtered data set. The negative cells are removed as well. Cells with more than 2500 genes being expressed are filtered out.

```{r}
seu_obj_preproc <- subset(seu_obj_filtered,
                          subset = hto_class == "Singlet" & nCount_genes < 2500)
```

The classification of the cells are now irrelevant, as all cells are thought to be singlets. Thus, this metadata is removed before the filtered Seurat object is saved. The HTO assay will no longer be included.

```{r}
seu_obj_preproc$hto_class  <- NULL
seu_obj_preproc$pred       <- NULL
seu_obj_preproc$doublet    <- NULL
seu_obj_preproc@assays$HTO <- NULL

saveRDS(seu_obj_preproc, 
        file = "../data/seurat_data/seu_obj_preproc.rds")
```
